/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	append,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "svelte/internal";

function create_if_block_4(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "a";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (16:1) {#if b}
function create_if_block_3(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "b";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (20:1) {#if c}
function create_if_block_2(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "c";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (26:1) {#if d}
function create_if_block_1(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "d";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (33:0) {#if e}
function create_if_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "e";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t_7;
	let p_1;
	let t_5;
	let t_4;
	let t_3;
	let p;
	let t_1;
	let t;
	let if_block_anchor;
	let if_block_4 = /*a*/ ctx[0] && create_if_block_4(ctx);
	let if_block_3 = /*b*/ ctx[1] && create_if_block_3(ctx);
	let if_block_2 = /*c*/ ctx[2] && create_if_block_2(ctx);
	let if_block_1 = /*d*/ ctx[3] && create_if_block_1(ctx);
	let if_block = /*e*/ ctx[4] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block_4) if_block_4.c();
			t_7 = space();
			p_1 = element("p");
			p_1.textContent = "this can be used as an anchor";
			t_5 = space();
			if (if_block_3) if_block_3.c();
			t_4 = space();
			if (if_block_2) if_block_2.c();
			t_3 = space();
			p = element("p");
			p.textContent = "so can this";
			t_1 = space();
			if (if_block_1) if_block_1.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block_4) if_block_4.m(div, null);
			append(div, t_7);
			append(div, p_1);
			append(div, t_5);
			if (if_block_3) if_block_3.m(div, null);
			append(div, t_4);
			if (if_block_2) if_block_2.m(div, null);
			append(div, t_3);
			append(div, p);
			append(div, t_1);
			if (if_block_1) if_block_1.m(div, null);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*a*/ ctx[0]) {
				if (if_block_4) {
					
				} else {
					if_block_4 = create_if_block_4(ctx);
					if_block_4.c();
					if_block_4.m(div, t_7);
				}
			} else if (if_block_4) {
				if_block_4.d(1);
				if_block_4 = null;
			}

			if (/*b*/ ctx[1]) {
				if (if_block_3) {
					
				} else {
					if_block_3 = create_if_block_3(ctx);
					if_block_3.c();
					if_block_3.m(div, t_4);
				}
			} else if (if_block_3) {
				if_block_3.d(1);
				if_block_3 = null;
			}

			if (/*c*/ ctx[2]) {
				if (if_block_2) {
					
				} else {
					if_block_2 = create_if_block_2(ctx);
					if_block_2.c();
					if_block_2.m(div, t_3);
				}
			} else if (if_block_2) {
				if_block_2.d(1);
				if_block_2 = null;
			}

			if (/*d*/ ctx[3]) {
				if (if_block_1) {
					
				} else {
					if_block_1 = create_if_block_1(ctx);
					if_block_1.c();
					if_block_1.m(div, null);
				}
			} else if (if_block_1) {
				if_block_1.d(1);
				if_block_1 = null;
			}

			if (/*e*/ ctx[4]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block_4) if_block_4.d();
			if (if_block_3) if_block_3.d();
			if (if_block_2) if_block_2.d();
			if (if_block_1) if_block_1.d();
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { a } = $$props;
	let { b } = $$props;
	let { c } = $$props;
	let { d } = $$props;
	let { e } = $$props;

	$$self.$set = $$props => {
		if ("a" in $$props) $$invalidate(0, a = $$props.a);
		if ("b" in $$props) $$invalidate(1, b = $$props.b);
		if ("c" in $$props) $$invalidate(2, c = $$props.c);
		if ("d" in $$props) $$invalidate(3, d = $$props.d);
		if ("e" in $$props) $$invalidate(4, e = $$props.e);
	};

	return [a, b, c, d, e];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { a: 0, b: 1, c: 2, d: 3, e: 4 });
	}
}

export default Component;